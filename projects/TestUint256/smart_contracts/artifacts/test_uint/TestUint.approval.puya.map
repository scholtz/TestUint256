{
  "version": 3,
  "sources": [
    "C:/Users/ludko/source/repos/scholtz/TestUint256/projects/TestUint256/smart_contracts/test_uint/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AASG;;AAAA;AAAA;AAAA;;AAAA;AATH;;;AASG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AALH;;;AAKG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AADH;;;AACG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;AAES;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAsB;AAA7B;AAEF;;;AAES;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEF;;;AAQQ;;AAAgC;;;;;;;;;;AAAb;AAGV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACf",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 0"
    },
    "6": {
      "op": "bytecblock 0x151f7c75"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "18": {
      "op": "pushbytess 0x27cdcff4 0xdf2bb029 0xda0b60f3 // method \"uint256Touint64(uint256)uint64\", method \"uint256ToUintN64(uint256)uint64\", method \"safeConversion(uint256)uint64\"",
      "defined_out": [
        "Method(safeConversion(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(uint256Touint64(uint256)uint64)"
      ],
      "stack_out": [
        "Method(uint256Touint64(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(safeConversion(uint256)uint64)"
      ]
    },
    "35": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(safeConversion(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(uint256Touint64(uint256)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(uint256Touint64(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(safeConversion(uint256)uint64)",
        "tmp%2#0"
      ]
    },
    "38": {
      "op": "match main_uint256Touint64_route@3 main_uint256ToUintN64_route@4 main_safeConversion_route@5",
      "stack_out": []
    },
    "46": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "47": {
      "op": "return",
      "stack_out": []
    },
    "48": {
      "block": "main_safeConversion_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "50": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "51": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "52": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "54": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "55": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "58": {
      "callsub": "smart_contracts/test_uint/contract.algo.ts::TestUint.safeConversion",
      "op": "callsub safeConversion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "61": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "62": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "63": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "64": {
      "op": "log",
      "stack_out": []
    },
    "65": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "66": {
      "op": "return",
      "stack_out": []
    },
    "67": {
      "block": "main_uint256ToUintN64_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "69": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "70": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "71": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "73": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "74": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "77": {
      "callsub": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256ToUintN64",
      "op": "callsub uint256ToUintN64",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "80": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "81": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%12#0"
      ]
    },
    "82": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "83": {
      "op": "log",
      "stack_out": []
    },
    "84": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "85": {
      "op": "return",
      "stack_out": []
    },
    "86": {
      "block": "main_uint256Touint64_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "88": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "89": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "90": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "92": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "93": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "96": {
      "callsub": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256Touint64",
      "op": "callsub uint256Touint64",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "99": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "100": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "101": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "102": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "103": {
      "op": "log",
      "stack_out": []
    },
    "104": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "105": {
      "op": "return",
      "stack_out": []
    },
    "106": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "108": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "111": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "113": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "114": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "115": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "116": {
      "op": "return",
      "stack_out": []
    },
    "117": {
      "subroutine": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256Touint64",
      "params": {
        "n#0": "bytes"
      },
      "block": "uint256Touint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "120": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "121": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "8"
      ]
    },
    "123": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "124": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ]
    },
    "126": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0"
      ]
    },
    "127": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "128": {
      "retsub": true,
      "op": "retsub"
    },
    "129": {
      "subroutine": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256ToUintN64",
      "params": {
        "n#0": "bytes"
      },
      "block": "uint256ToUintN64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "132": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "133": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "134": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "8"
      ]
    },
    "135": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "136": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ]
    },
    "138": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0"
      ]
    },
    "139": {
      "retsub": true,
      "op": "retsub"
    },
    "140": {
      "subroutine": "smart_contracts/test_uint/contract.algo.ts::TestUint.safeConversion",
      "params": {
        "n#0": "bytes"
      },
      "block": "safeConversion",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "143": {
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "145": {
      "op": "pushbytes 0xffffffffffffffff",
      "defined_out": [
        "0xffffffffffffffff",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)",
        "0xffffffffffffffff"
      ]
    },
    "155": {
      "op": "b&",
      "defined_out": [
        "lower64#0"
      ],
      "stack_out": [
        "lower64#0"
      ]
    },
    "156": {
      "op": "dup",
      "defined_out": [
        "lower64#0",
        "lower64#0 (copy)"
      ],
      "stack_out": [
        "lower64#0",
        "lower64#0 (copy)"
      ]
    },
    "157": {
      "op": "len",
      "defined_out": [
        "lower64#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "lower64#0",
        "value_len%0#0"
      ]
    },
    "158": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "lower64#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "lower64#0",
        "value_len%0#0",
        "8"
      ]
    },
    "159": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "lower64#0"
      ],
      "stack_out": [
        "lower64#0",
        "len_ok%0#0"
      ]
    },
    "160": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "lower64#0"
      ]
    },
    "161": {
      "op": "intc_1 // 8",
      "stack_out": [
        "lower64#0",
        "8"
      ]
    },
    "162": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "lower64#0"
      ],
      "stack_out": [
        "lower64#0",
        "bzero%0#0"
      ]
    },
    "163": {
      "op": "b|",
      "defined_out": [
        "uint64#0"
      ],
      "stack_out": [
        "uint64#0"
      ]
    },
    "164": {
      "retsub": true,
      "op": "retsub"
    }
  }
}