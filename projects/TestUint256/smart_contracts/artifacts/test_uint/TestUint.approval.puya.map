{
  "version": 3,
  "sources": [
    "C:/Users/ludko/source/repos/scholtz/TestUint256/projects/TestUint256/smart_contracts/test_uint/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAuBG;;AAAA;AAAA;AAAA;;AAAA;AAvBH;;;AAuBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AATH;;;AASG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AALH;;;AAKG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AADH;;;AACG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AACE;;;AAES;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAsB;AAA7B;AAEF;;;AAES;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;AAEF;;;AAQQ;;AAAgC;;;;;;;;;;AAAb;AAGV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AAEF;;;AAMgB;;AAAmC;;;AACpC;AAAN;AAAP;AAEc;;AAAmC;;;AACpC;AAAN;AAAP;AAEc;;AAAmC;;;AACpC;AAAN;AAAP;AAEM;;AAAc;;;AACpB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 8 0"
    },
    "6": {
      "op": "bytecblock 0x151f7c75"
    },
    "13": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "15": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "18": {
      "op": "pushbytess 0x27cdcff4 0xdf2bb029 0xda0b60f3 0xbc57731a // method \"uint256Touint64(uint256)uint64\", method \"uint256ToUintN64(uint256)uint64\", method \"safeConversion(uint256)uint64\", method \"ConvertToUintN64UsingInterpretAsArc4(uint256)uint64\"",
      "defined_out": [
        "Method(ConvertToUintN64UsingInterpretAsArc4(uint256)uint64)",
        "Method(safeConversion(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(uint256Touint64(uint256)uint64)"
      ],
      "stack_out": [
        "Method(uint256Touint64(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(safeConversion(uint256)uint64)",
        "Method(ConvertToUintN64UsingInterpretAsArc4(uint256)uint64)"
      ]
    },
    "40": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(ConvertToUintN64UsingInterpretAsArc4(uint256)uint64)",
        "Method(safeConversion(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(uint256Touint64(uint256)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(uint256Touint64(uint256)uint64)",
        "Method(uint256ToUintN64(uint256)uint64)",
        "Method(safeConversion(uint256)uint64)",
        "Method(ConvertToUintN64UsingInterpretAsArc4(uint256)uint64)",
        "tmp%2#0"
      ]
    },
    "43": {
      "op": "match main_uint256Touint64_route@3 main_uint256ToUintN64_route@4 main_safeConversion_route@5 main_ConvertToUintN64UsingInterpretAsArc4_route@6",
      "stack_out": []
    },
    "53": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_2 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "54": {
      "op": "return",
      "stack_out": []
    },
    "55": {
      "block": "main_ConvertToUintN64UsingInterpretAsArc4_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "57": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "58": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "59": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "61": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "62": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "65": {
      "callsub": "smart_contracts/test_uint/contract.algo.ts::TestUint.ConvertToUintN64UsingInterpretAsArc4",
      "op": "callsub ConvertToUintN64UsingInterpretAsArc4",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "68": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "0x151f7c75"
      ]
    },
    "69": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%24#0"
      ]
    },
    "70": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "71": {
      "op": "log",
      "stack_out": []
    },
    "72": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "73": {
      "op": "return",
      "stack_out": []
    },
    "74": {
      "block": "main_safeConversion_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "76": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "77": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "78": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "80": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "81": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "84": {
      "callsub": "smart_contracts/test_uint/contract.algo.ts::TestUint.safeConversion",
      "op": "callsub safeConversion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "87": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "88": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "89": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "90": {
      "op": "log",
      "stack_out": []
    },
    "91": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "92": {
      "op": "return",
      "stack_out": []
    },
    "93": {
      "block": "main_uint256ToUintN64_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "95": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "96": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "97": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "99": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "100": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "103": {
      "callsub": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256ToUintN64",
      "op": "callsub uint256ToUintN64",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "106": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "0x151f7c75"
      ]
    },
    "107": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%12#0"
      ]
    },
    "108": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "109": {
      "op": "log",
      "stack_out": []
    },
    "110": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "111": {
      "op": "return",
      "stack_out": []
    },
    "112": {
      "block": "main_uint256Touint64_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "114": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "115": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "116": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "118": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "119": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "122": {
      "callsub": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256Touint64",
      "op": "callsub uint256Touint64",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "125": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "126": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "127": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "128": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "129": {
      "op": "log",
      "stack_out": []
    },
    "130": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "131": {
      "op": "return",
      "stack_out": []
    },
    "132": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "134": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "137": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "139": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "140": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "141": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "142": {
      "op": "return",
      "stack_out": []
    },
    "143": {
      "subroutine": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256Touint64",
      "params": {
        "n#0": "bytes"
      },
      "block": "uint256Touint64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "146": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "147": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "148": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "8"
      ]
    },
    "149": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "150": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ]
    },
    "152": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0"
      ]
    },
    "153": {
      "op": "btoi",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "154": {
      "retsub": true,
      "op": "retsub"
    },
    "155": {
      "subroutine": "smart_contracts/test_uint/contract.algo.ts::TestUint.uint256ToUintN64",
      "params": {
        "n#0": "bytes"
      },
      "block": "uint256ToUintN64",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "158": {
      "op": "intc_2 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "159": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": []
    },
    "160": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8"
      ],
      "stack_out": [
        "8"
      ]
    },
    "161": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0"
      ],
      "stack_out": [
        "bzero%0#0"
      ]
    },
    "162": {
      "op": "frame_dig -1",
      "defined_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "bzero%0#0",
        "n#0 (copy)"
      ]
    },
    "164": {
      "op": "b|",
      "defined_out": [
        "arc4_encoded%0#0"
      ],
      "stack_out": [
        "arc4_encoded%0#0"
      ]
    },
    "165": {
      "retsub": true,
      "op": "retsub"
    },
    "166": {
      "subroutine": "smart_contracts/test_uint/contract.algo.ts::TestUint.safeConversion",
      "params": {
        "n#0": "bytes"
      },
      "block": "safeConversion",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "169": {
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "171": {
      "op": "pushbytes 0xffffffffffffffff",
      "defined_out": [
        "0xffffffffffffffff",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)",
        "0xffffffffffffffff"
      ]
    },
    "181": {
      "op": "b&",
      "defined_out": [
        "lower64#0"
      ],
      "stack_out": [
        "lower64#0"
      ]
    },
    "182": {
      "op": "dup",
      "defined_out": [
        "lower64#0",
        "lower64#0 (copy)"
      ],
      "stack_out": [
        "lower64#0",
        "lower64#0 (copy)"
      ]
    },
    "183": {
      "op": "len",
      "defined_out": [
        "lower64#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "lower64#0",
        "value_len%0#0"
      ]
    },
    "184": {
      "op": "intc_1 // 8",
      "defined_out": [
        "8",
        "lower64#0",
        "value_len%0#0"
      ],
      "stack_out": [
        "lower64#0",
        "value_len%0#0",
        "8"
      ]
    },
    "185": {
      "op": "<=",
      "defined_out": [
        "len_ok%0#0",
        "lower64#0"
      ],
      "stack_out": [
        "lower64#0",
        "len_ok%0#0"
      ]
    },
    "186": {
      "error": "overflow",
      "op": "assert // overflow",
      "stack_out": [
        "lower64#0"
      ]
    },
    "187": {
      "op": "intc_1 // 8",
      "stack_out": [
        "lower64#0",
        "8"
      ]
    },
    "188": {
      "op": "bzero",
      "defined_out": [
        "bzero%0#0",
        "lower64#0"
      ],
      "stack_out": [
        "lower64#0",
        "bzero%0#0"
      ]
    },
    "189": {
      "op": "b|",
      "defined_out": [
        "uint64#0"
      ],
      "stack_out": [
        "uint64#0"
      ]
    },
    "190": {
      "retsub": true,
      "op": "retsub"
    },
    "191": {
      "subroutine": "smart_contracts/test_uint/contract.algo.ts::TestUint.ConvertToUintN64UsingInterpretAsArc4",
      "params": {
        "n#0": "bytes"
      },
      "block": "ConvertToUintN64UsingInterpretAsArc4",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "194": {
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "196": {
      "op": "substring 0 8",
      "defined_out": [
        "part1#0"
      ],
      "stack_out": [
        "part1#0"
      ]
    },
    "199": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "201": {
      "error": "Buffer overflow - part1",
      "op": "assert // Buffer overflow - part1",
      "stack_out": []
    },
    "202": {
      "op": "frame_dig -1",
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "204": {
      "op": "substring 8 16",
      "defined_out": [
        "part2#0"
      ],
      "stack_out": [
        "part2#0"
      ]
    },
    "207": {
      "op": "btoi",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "208": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "209": {
      "error": "Buffer overflow - part1",
      "op": "assert // Buffer overflow - part1",
      "stack_out": []
    },
    "210": {
      "op": "frame_dig -1",
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "212": {
      "op": "substring 16 24",
      "defined_out": [
        "part3#0"
      ],
      "stack_out": [
        "part3#0"
      ]
    },
    "215": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "216": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "217": {
      "error": "Buffer overflow - part3",
      "op": "assert // Buffer overflow - part3",
      "stack_out": []
    },
    "218": {
      "op": "frame_dig -1",
      "stack_out": [
        "n#0 (copy)"
      ]
    },
    "220": {
      "op": "substring 24 32",
      "defined_out": [
        "uint64Bytes#0"
      ],
      "stack_out": [
        "uint64Bytes#0"
      ]
    },
    "223": {
      "retsub": true,
      "op": "retsub"
    }
  }
}